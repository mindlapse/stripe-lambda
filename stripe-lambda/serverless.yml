# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: stripe-lambda
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"



provider:
  name: aws
  runtime: nodejs10.x

# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
environment:
  STRIPE_SECRET_KEY: ${env.STRIPE_LAMBDA_SECRET_KEY}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createPaymentIntent:
    handler: handler.createPaymentIntent
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    StripeLambdaRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties: 
        Description: API Endpoints for a Serverless Stripe backend
        Name: StripeLambdaRestApi

    StripeLambdaCreatePaymentIntentPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: {"Fn::GetAtt": ["CreatePaymentIntentLambdaFunction", "Arn"]}
        Principal: "apigateway.amazonaws.com"
        SourceArn: {"Fn::Join": ["", 
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "StripeLambdaRestApi"}, "/*"]
        ]}

    StripeLambdaApiStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId: {"Ref": "StripeLambdaApiDeployment"}
        MethodSettings: [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }]
        RestApiId: {"Ref": "StripeLambdaRestApi"}
        StageName: LATEST

    StripeLambdaApiGatewayCloudWatchLogsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        }
        Policies: [{
          PolicyName: StripeLambdaApiGatewayCloudWatchLogsPolicy,
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]

    StripeLambdaApiGatewayAccount:
      Type: AWS::ApiGateway::Account
      Properties:
        CloudWatchRoleArn : {"Fn::GetAtt" : ["StripeLambdaApiGatewayCloudWatchLogsRole", "Arn"] }

    StripeLambdaApiDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn: ["StripeLambdaCreatePaymentIntentRequest"]
      Properties:
        RestApiId: {"Ref": "StripeLambdaRestApi"}
        StageName: "dev"

    StripeLambdaCreatePaymentIntentResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: {"Ref": "StripeLambdaRestApi"}
        ParentId: {"Fn::GetAtt": ["StripeLambdaRestApi", "RootResourceId"]}
        PathPart: "createPaymentIntent"

    StripeLambdaCreatePaymentIntentRequest:
      DependsOn: StripeLambdaCreatePaymentIntentPermission
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: "NONE"
        HttpMethod: "GET"
        Integration: {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["CreatePaymentIntentLambdaFunction", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join" : ["", [
              "{",
                "\"name\": \"$input.params('name')\"",
              "}"
            ]]}
          }
        }
        RequestParameters: {
          "method.request.querystring.name": false
        }
        ResourceId: {"Ref": "StripeLambdaCreatePaymentIntentResource"}
        RestApiId: {"Ref": "StripeLambdaRestApi"}

        MethodResponses: [{
          "StatusCode": 200
        }]

#  Resources:
#
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
